import Head from 'next/head';
import Image from 'next/image';
import { Inter } from '@next/font/google';
import { Footer } from '@/components/footer';
import Link from 'next/link';
import prisma from 'lib/prisma';
import Navbar from '@/components/navbar';
import { GetServerSideProps, GetServerSidePropsContext } from 'next';
import { getSession } from 'next-auth/react';
import axios from 'axios';
import SimpleDialog from '@/components/popuponload';
import { useState } from 'react';
import Router, { useRouter } from 'next/router';

interface ParkingHistory {
  id: number
  parking_start: string
  parking_end: string
  parkinglot_name: string
}

interface Props {
  histories: ParkingHistory[]
}

export default function ParkingHistory({ histories }: Props) {

  const [endParkingId, setEndParkingId] = useState<number>(0)

  async function endParking(history_id: number) {
    const response = await axios.put(`/api/history/${history_id}`, {
      parking_end: new Date()
    }).then(response => {
      // Show successful
      // Refresh the page
      Router.reload()
    }).catch(error => {
      // Show failed
      console.log(error)
    })
  }
  return (
    <>
      <Navbar />
      <Head>
        <title>Parking History</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        {
          (endParkingId !== 0) && (
            <SimpleDialog 
              message='Apakah kamu sudah selesai parkir?' 
              onActionYes={() => { endParking(endParkingId) }} 
              onActionNo={()=> {setEndParkingId(0)}}/>
          )
        }
      <main className="bg-white min-h-screen">
        <div className="flex py-5 justify-center  text-black">
          <div className=" w-4/5 px-5 bg-white drop-shadow-2xl rounded-lg">
            <div className="flex justify-center py-5">
              <h1 className="text-2xl font-bold">Histori Parkiran</h1>
            </div>
            <div className="flex flex-col">
              <div className="overflow-x-auto sm:-mx-6 lg:-mx-8">
                <div className="inline-block min-w-full py-2 sm:px-6 lg:px-8">
                  <div className="overflow-hidden">
                    <table className="min-w-full text-left">
                      <thead className="border-b font-medium border-black">
                        <tr>
                          <th scope="col" className="px-6 py-4">
                            #
                          </th>
                          <th scope="col" className="px-6 py-4">
                            Nama Parkiran
                          </th>
                          <th scope="col" className="px-6 py-4">
                            Start
                          </th>
                          <th scope="col" className="px-6 py-4">
                            End
                          </th>
                          <th scope="col" className="px-6 py-4">
                            Status
                          </th>
                          <th scope="col" className=" px-6 py-4">
                            Confirmation
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {
                          histories.map(history => (

                            <tr className="border-b dark:border-neutral-500">
                              <td className="whitespace-nowrap px-6 py-4 font-medium">{history.id}</td>
                              <td className="whitespace-nowrap px-6 py-4">{history.parkinglot_name}</td>
                              <td className="whitespace-nowrap px-6 py-4">{history.parking_start}</td>
                              <td className="whitespace-nowrap px-6 py-4">{history.parking_end}</td>
                              <td className="whitespace-nowrap px-6 py-4">{(history.parking_end ? "Selesai parkir" : "Sedang parkir")}</td>
                              <td className="whitespace-nowrap px-6 py-4">
                                <button className="bg-yellow-500 px-3 py-3 rounded-full text-white" disabled={(history.parking_end) ? true : false} onClick={() => setEndParkingId(history.id)}>
                                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" className="w-6 h-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" />
                                  </svg>
                                </button>
                              </td>
                            </tr>
                          ))
                        }
                        {/* <tr className="border-b dark:border-neutral-500">
                          <td className="whitespace-nowrap px-6 py-4 font-medium">1</td>
                          <td className="whitespace-nowrap px-6 py-4">Parkiran Biru FIS</td>
                          <td className="whitespace-nowrap px-6 py-4">13.00 27/30/22</td>
                          <td className="whitespace-nowrap px-6 py-4">3.00 27/30/22</td>
                          <td className="whitespace-nowrap px-6 py-4">Aktif</td>
                          <td className="whitespace-nowrap px-6 py-4">
                            <button className="bg-yellow-500 px-3 py-3 rounded-full text-white">
                              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" className="w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" />
                              </svg>
                            </button>
                          </td>
                        </tr> */}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getSession(context)
  const user_id = session?.user?.id as string
  let response = await prisma.parkingHistory.findMany({
    where: {
      user_id: user_id,
    },
    select: {
      id: true,
      parking_start: true,
      parking_end: true,
      parkinglot: {
        select: {
          name: true
        }
      }
    }
  })

  response = JSON.parse(JSON.stringify(response))

  const histories = response.flatMap(history => {
    return {
      id: history.id,
      parking_start: history.parking_start,
      parking_end: history.parking_end,
      parkinglot_name: history.parkinglot.name
    }
  })


  return {
    props: {
      histories
    }
  }
}