import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import { Navbar } from "@/components/navbar";
import { Footer } from "@/components/footer";
import { Field, Form, Formik, FormikValues } from "formik";
import { NextPage } from "next";
import axios from "axios";
import { getProviders, signIn, useSession } from "next-auth/react";
import Router, { useRouter } from "next/router";
import { use, useState } from "react";
import Link from "next/link";

const inter = Inter({ subsets: ["latin"] });

const Login: NextPage = ({ providers }: any) => {

	const [showPassword, setShowPassword] = useState(false)

	// Create a Component ProvidersButtons
	const ProviderButtons = ({ providers }: any) => (
		<div className="mt-5">
			{Object.values(providers).map(
				(provider: any) =>
					provider.name !== "Credentials" &&
					provider.name !== "Email" && (
						<button
							key={provider.name}
							onClick={() => {
								signIn(provider.id, {
									callbackUrl: "http://localhost:3000",
								});
							}}
						>
							<p className="text-black">Sign In with {provider.name}</p>
						</button>
					)
			)}
		</div>
	);

	// Front End Login Form
	return (
		<>
			<Head>
				<title>Login</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Navbar />
			<div>
				<main className="p-36 flex items-center justify-between flex-col-2 min-h-screen bg-white ">
					<div>
						<Formik
							initialValues={{ email: "", password: "" }}
							validateOnChange={false}
							validateOnBlur={false}
							onSubmit={(values, actions) => {
								console.log("onSubmit");
								loginUser(values, actions)
							}}>
							{(props) => (
								<Form>
									<div>
										<div>
											<p className="text-5xl text-amber-900  pb-5 font-bold">
												Halo!
											</p>
											<p className="text-xl text-black pb-7">
												Kamu harus login dulu nih sebelum pakai app-nya
											</p>
										</div>
										<Field name="email">
											{() => (
												<div className="pb-5">
													<input
														type="email"
														name="email"
														className="rounded-lg w-96 text-black"
														value={props.values.email}
														onChange={props.handleChange}
														placeholder="Email"
													/>
												</div>
											)}
										</Field>
										<Field name="password">
											{() => (
												<div className="pb-3">
													<input
														type={ (showPassword) ? "text" : "password"}
														name="password"
														className="rounded-lg w-96 text-black"
														value={props.values.password}
														onChange={props.handleChange}
														placeholder="Password"
													/>
												</div>
											)}
										</Field>
									</div>
									<div className="grid grid-cols-2 pb-7">
										<div className="text-black">
											<p>
												<input className="form-checkbox rounded-full mr-3" type="checkbox" onClick={(e) => setShowPassword(e.currentTarget.checked)} /> Tampilkan Kata Sandi
											</p>
										</div>
										<div className="text-gray-700 underline text-right ">
											<Link href="/forgot-password">Lupa sandinya?</Link>
										</div>
										<p className="text-black text-right font-bold"></p>
									</div>
									<div>
										<div className="bg-purple-800 rounded-lg font-bold text-center w-44 h-12">
											<button className="py-3" type="submit">
												Login
											</button>
										</div>
									</div>
								</Form>
							)}
						</Formik>
						<div>
							<ProviderButtons providers={providers}></ProviderButtons>
						</div>
					</div>

					<div className="">
						<Image
							src="/tameng.png"
							width={270}
							height={0}
							alt="Picture of the author"
							className="scale-100  mr-24" // just an example
						/>
					</div>
				</main>
			</div>
			<Footer />
		</>
	);
};

export default Login;

export async function getServerSideProps() {

	return {
		props: {
			providers: await getProviders()
		}
	}
}

const redirectToHome = () => {
	const router = Router
	const { pathname } = router
	if (pathname === "/login") { router.push('/') }
}

export const loginUser = async (values: FormikValues, actions: any) => {

	actions.setSubmitting(false)

	// If email is not verified, redirect to verification page
	// Else login using Credentials

	const loginInfo: any = await axios.post(
		"/api/login",
		JSON.stringify(values),
		{
			headers: {
				Accept: "application/json",
				"Content-Type": "application/json",
			},
		}
	);

	console.log(loginInfo);
	if (loginInfo.data.emailVerified === null) {
		// If the email is not verified, sign in using email first then verify email after user click link
		console.log("not verified");

		// Redirect to verification page

		if (loginInfo.data.hasVerifToken === false) {
			const res: any = await signIn("email", {
				email: values.email,
				password: values.password,
				redirect: true,
			});
			res.error ? console.log(res.error) : Router.push("/verification");
		} else {
			console.log("Please check your email");
			Router.push("/verification");
		}
	} else {

		// If the email is verified, sign in using credentials
		console.log("verified");
		const res: any = await signIn("credentials", {
			email: values.email,
			password: values.password,
			redirect: false,
			callbackUrl: `${window.location.origin}`,
		});
		console.log(res);
		res.error ? console.log(res.error) : redirectToHome();
	}
};