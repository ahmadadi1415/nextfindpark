// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
//   shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
// }
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model ParkingHistory {
  id            Int        @id @default(autoincrement())
  parking_start DateTime
  parking_end   DateTime
  user_id       String     @unique(map: "ParkingHistory_user_id_key")
  parkinglot_id Int
  parkinglot    ParkingLot @relation(fields: [parkinglot_id], references: [id], map: "ParkingHistory_parkinglot_id_fkey")
  user          User       @relation(fields: [user_id], references: [id], map: "ParkingHistory_user_id_fkey")

  @@index([parkinglot_id], map: "ParkingHistory_parkinglot_id_fkey")
}

model ParkingLot {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  description    String           @db.MediumText
  location       String           @db.MediumText
  image          String?
  latitude       String?
  longitude      String?
  status         Boolean          @default(false)
  hourlyFee      String           @default("0")
  rate           Float            @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  parkinghistory ParkingHistory[]
  rating         Rating[]
  operator       User[]
}

model Profile {
  id       Int     @id @default(autoincrement())
  fullname String?  @db.VarChar(255)
  photo String?
  user_id  String  @unique(map: "Profile_user_id_key")
  user     User    @relation(fields: [user_id], references: [id], map: "Profile_user_id_fkey")
}

model Rating {
  id            Int        @id @default(autoincrement())
  rate          Int        @db.TinyInt
  review        String?    @db.LongText
  user_id       String
  parkinglot_id Int

  pict_review RatingPictures[]
  parkinglot    ParkingLot @relation(fields: [parkinglot_id], references: [id], map: "Rating_parkinglot_id_fkey")
  user          User       @relation(fields: [user_id], references: [id], map: "Rating_user_id_fkey")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parkinglot_id], map: "Rating_parkinglot_id_fkey")
  @@index([user_id], map: "Rating_user_id_fkey")
}

model RatingPictures {
  id Int @id @default(autoincrement())
  image String
  rating_id Int
  rating Rating @relation(fields: [rating_id], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique(map: "User_email_key")
  emailVerified  DateTime?
  image          String?
  password       String?         @db.VarChar(255)
  role           UserRole       @default(user)
  createdAt      DateTime        @default(now())
  account        Account[]
  parkinghistory ParkingHistory?
  profile        Profile?
  rating         Rating[]
  session        Session[]

  // For Operator
  parkingLot     ParkingLot? @relation(fields: [parkingLotId], references: [id])
  parkingLotId   Int?
}

model VerificationToken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

enum UserRole {
  admin
  operator
  user
}
