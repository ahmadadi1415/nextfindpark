// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(cuid())
  email String @unique
  password String @db.VarChar(255)
  isAdmin Boolean @default(false)
  createdAt String?
  
  profile Profile?
  parking ParkingHistory[]
  rating Rating[]

  account Account[]
  session Session[]
}
model Profile {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  photo String?

  user User @relation(fields: [user_id], references: [id])
  user_id String @unique
}

model ParkingLot {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  description String @db.MediumText
  location String @db.MediumText
  latitude String?
  longitude String?
  status Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parking ParkingHistory[]
  rating Rating[]
}

model ParkingHistory {
  id Int @id @default(autoincrement())
  parking_start DateTime 
  parking_end DateTime 

  user User @relation(fields: [user_id], references: [id])
  user_id String @unique
  parking_lot ParkingLot @relation(fields: [parkinglot_id], references: [id])
  parkinglot_id Int
}

// model ParkingHistory {
//   id Int @id @default(autoincrement()) 
//   user User @relation(fields: [user_id], references: [id])
//   user_id Int
//   parking_start DateTime
//   parking_end DateTime
//   parking_time Int @db.SmallInt

//   parking_Lot ParkingLot @relation(fields: [parkinglot_id], references: [id])
//   parkinglot_id Int
// }

model Rating {
  id Int @id @default(autoincrement())
  rate Int @db.TinyInt
  review String? @db.LongText
  pict_review String?

  user User @relation(fields: [user_id], references: [id])
  user_id String
  parking_lot ParkingLot @relation(fields: [parkinglot_id], references: [id])
  parkinglot_id Int
}